(()=>{"use strict";var e={638:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),a=t.n(r),i=t(645),o=t.n(i)()(a());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Poppins:wght@100;300;400;500;700&display=swap);"]),o.push([e.id,'* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n#content {\n    display: flex;\n    height: 100vh;\n    width: 100%;\n    font-family: "Poppins", sans-serif;\n    color: white;\n}\n',"",{version:3,sources:["webpack://./src/styles/general.css"],names:[],mappings:"AAEA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,aAAa;IACb,WAAW;IACX,kCAAkC;IAClC,YAAY;AAChB",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@100;300;400;500;700&display=swap");\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n#content {\n    display: flex;\n    height: 100vh;\n    width: 100%;\n    font-family: "Poppins", sans-serif;\n    color: white;\n}\n'],sourceRoot:""}]);const s=o},756:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),a=t.n(r),i=t(645),o=t.n(i)()(a());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Poppins:wght@100;300;400;500;700&display=swap);"]),o.push([e.id,'#main {\n    width: 100%;\n    height: 100%;\n    background-color: #f4f4f4;\n    color: black;\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    justify-content: center;\n    align-items: center;\n}\n\n#appContainer {\n    padding: 10px;\n    border: 2px solid black;\n    border-radius: 20px;\n    height: 90%;\n    width: 80%;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n}\n\n#appHeader {\n    height: 15%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 20px;\n}\n\n.line {\n    height: 1px;\n    width: 200px;\n    border: 1px solid black;\n}\n\n#projectHeader {\n    letter-spacing: 3px;\n    text-align: center;\n}\n\n#add {\n    height: 10%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 50px;\n}\n\n#task {\n    width: 40%; /* Full width */\n    padding: 12px; /* Some padding */\n    border: 1px solid #ccc; /* Gray border */\n    border-radius: 4px; /* Rounded borders */\n    box-sizing: border-box; /* Make sure that padding and width stays in place */\n    resize: vertical; /* Allow the user to vertically resize the textarea (not horizontally) */\n}\n\ninput[type="button"] {\n    border-radius: 5px;\n    border-style: none;\n    background-color: transparent;\n    border: 2px solid #50514f;\n    font-family: "Poppins";\n    padding: 10px 20px;\n    transition: border 0.1s;\n}\n\ninput[type="button"]:hover {\n    border: 2px solid midnightblue;\n    cursor: pointer;\n    font-weight: 500;\n}\n\n#todolist {\n    height: 70%;\n    width: 90%;\n    border: 1px solid black;\n    border-radius: 5px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    overflow: auto;\n}\n\n#sortby {\n    width: 90%;\n    display: flex;\n    justify-content: flex-end;\n}\n\n#sortby p {\n    margin: 10px;\n    font-size: 14px;\n    color: #766d6d;\n    font-style: italic;\n}\n\n#sortby p:hover {\n    cursor: pointer;\n}\n\n#tasks {\n    width: 90%;\n    height: fit-content;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n/* TODO */\n\n.todo {\n    width: 100%;\n    font-size: 1.1em;\n    background-color: white;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 20px;\n    border: 1px solid #ddd;\n    box-shadow: 0px 5px 10px 1px rgba(131, 45, 45, 0.15);\n    border-radius: 5px;\n    transition: all 0.2s;\n}\n\n.todo:hover {\n    cursor: pointer;\n    transform: scale(1.01);\n    box-shadow: 0px 5px 10px 1px rgba(131, 45, 45, 0.3);\n}\n\n.todoContainer {\n    width: 95%;\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 10px;\n}\n\n.checkbox {\n    min-width: 20px;\n    min-height: 20px;\n    background-color: white;\n    border-radius: 50%;\n    vertical-align: middle;\n    border: 1px solid #000;\n    appearance: none;\n    outline: none;\n    cursor: pointer;\n}\n\n.checkbox:hover {\n    border: 2px solid #000;\n}\n\n.todoPriority {\n    font-weight: 700;\n}\n\n.datecontainer {\n    width: 15%;\n}\n\n.datep {\n    font-size: 12px;\n    font-style: italic;\n    font-weight: 300;\n    text-align: center;\n}\n\n/* Overlay for when a task is clicked */\n\n#overlay {\n    position: fixed; /* Sit on top of the page content */\n    display: none; /* Hidden by default */\n    width: 100%; /* Full width (cover the whole page) */\n    height: 100%; /* Full height (cover the whole page) */\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: rgba(0, 0, 0, 0.1); /* Black background with opacity */\n    z-index: 2; /* Specify a stack order in case you\'re using a different order for other elements */\n}\n\n#overlay-item {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    color: #fff;\n    transform: translate(-50%, -50%);\n    height: 600px;\n    width: 550px;\n    background-color: #829cbc;\n    border-radius: 20px;\n    box-shadow: 0px 4px 15px 3px rgba(0, 0, 0, 0.25);\n    padding: 30px;\n    display: flex;\n    flex-direction: column;\n    z-index: 3;\n    overflow: auto;\n    justify-content: space-around;\n    gap: 10px;\n}\n\n#cardHeader {\n    font-size: 32px;\n    font-weight: 300;\n}\n\n#cardPriorityDiv {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n#priorityContainer {\n    display: flex;\n    gap: 10px;\n}\n\n.cardPriority {\n    font-weight: 700;\n    font-size: 32px;\n    height: 50px;\n    width: 50px;\n    border-radius: 10px;\n    border: 1px solid whitesmoke;\n    text-align: center;\n    transition: transform 0.2s;\n}\n\n.cardPriority:hover {\n    transform: scale(1.05);\n    border: 2px solid whitesmoke;\n    cursor: pointer;\n}\n\n.cardPriorityOne {\n    color: #47894b;\n}\n\n.cardPriorityTwo {\n    color: #f4e98c;\n}\n\n.cardPriorityThree {\n    color: #b90f0f;\n}\n\n.cardPrioritySelected {\n    border: 2px solid whitesmoke;\n    transform: scale(1.05);\n}\n\n/* Due Date */\n\n#cardDueDiv {\n    display: flex;\n    justify-content: space-between;\n}\n\n/* Notes */\n\ntextarea {\n    width: 100%; /* Full width */\n    min-height: 75px;\n    padding: 12px; /* Some padding */\n    border: 1px solid #ccc; /* Gray border */\n    border-radius: 4px; /* Rounded borders */\n    box-sizing: border-box; /* Make sure that padding and width stays in place */\n    margin-top: 6px; /* Add a top margin */\n    margin-bottom: 16px; /* Bottom margin */\n    resize: none; /* Allow the user to vertically resize the textarea (not horizontally) */\n    font-family: "Poppins", sans-serif;\n}\n\n/* Checklist */\n\n.newItem {\n    padding: 2px;\n    background-color: transparent;\n    border: none;\n    color: white;\n}\n\n.checklistDiv {\n    border: 1px solid #ddd;\n    padding: 4px;\n    border-radius: 5px;\n}\n\n.checklistItem {\n    list-style: none;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n\n.checkboxChecklist {\n    min-width: 15px;\n    min-height: 15px;\n    background-color: white;\n    vertical-align: middle;\n    border: 1px solid #000;\n    appearance: none;\n    outline: none;\n    cursor: pointer;\n    transition: all 0.1s;\n}\n\n.checkboxChecklist:hover {\n    transform: scale(1.2);\n}\n',"",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"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",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@100;300;400;500;700&display=swap");\n\n#main {\n    width: 100%;\n    height: 100%;\n    background-color: #f4f4f4;\n    color: black;\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    justify-content: center;\n    align-items: center;\n}\n\n#appContainer {\n    padding: 10px;\n    border: 2px solid black;\n    border-radius: 20px;\n    height: 90%;\n    width: 80%;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n}\n\n#appHeader {\n    height: 15%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 20px;\n}\n\n.line {\n    height: 1px;\n    width: 200px;\n    border: 1px solid black;\n}\n\n#projectHeader {\n    letter-spacing: 3px;\n    text-align: center;\n}\n\n#add {\n    height: 10%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 50px;\n}\n\n#task {\n    width: 40%; /* Full width */\n    padding: 12px; /* Some padding */\n    border: 1px solid #ccc; /* Gray border */\n    border-radius: 4px; /* Rounded borders */\n    box-sizing: border-box; /* Make sure that padding and width stays in place */\n    resize: vertical; /* Allow the user to vertically resize the textarea (not horizontally) */\n}\n\ninput[type="button"] {\n    border-radius: 5px;\n    border-style: none;\n    background-color: transparent;\n    border: 2px solid #50514f;\n    font-family: "Poppins";\n    padding: 10px 20px;\n    transition: border 0.1s;\n}\n\ninput[type="button"]:hover {\n    border: 2px solid midnightblue;\n    cursor: pointer;\n    font-weight: 500;\n}\n\n#todolist {\n    height: 70%;\n    width: 90%;\n    border: 1px solid black;\n    border-radius: 5px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    overflow: auto;\n}\n\n#sortby {\n    width: 90%;\n    display: flex;\n    justify-content: flex-end;\n}\n\n#sortby p {\n    margin: 10px;\n    font-size: 14px;\n    color: #766d6d;\n    font-style: italic;\n}\n\n#sortby p:hover {\n    cursor: pointer;\n}\n\n#tasks {\n    width: 90%;\n    height: fit-content;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n/* TODO */\n\n.todo {\n    width: 100%;\n    font-size: 1.1em;\n    background-color: white;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px 20px;\n    border: 1px solid #ddd;\n    box-shadow: 0px 5px 10px 1px rgba(131, 45, 45, 0.15);\n    border-radius: 5px;\n    transition: all 0.2s;\n}\n\n.todo:hover {\n    cursor: pointer;\n    transform: scale(1.01);\n    box-shadow: 0px 5px 10px 1px rgba(131, 45, 45, 0.3);\n}\n\n.todoContainer {\n    width: 95%;\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 10px;\n}\n\n.checkbox {\n    min-width: 20px;\n    min-height: 20px;\n    background-color: white;\n    border-radius: 50%;\n    vertical-align: middle;\n    border: 1px solid #000;\n    appearance: none;\n    outline: none;\n    cursor: pointer;\n}\n\n.checkbox:hover {\n    border: 2px solid #000;\n}\n\n.todoPriority {\n    font-weight: 700;\n}\n\n.datecontainer {\n    width: 15%;\n}\n\n.datep {\n    font-size: 12px;\n    font-style: italic;\n    font-weight: 300;\n    text-align: center;\n}\n\n/* Overlay for when a task is clicked */\n\n#overlay {\n    position: fixed; /* Sit on top of the page content */\n    display: none; /* Hidden by default */\n    width: 100%; /* Full width (cover the whole page) */\n    height: 100%; /* Full height (cover the whole page) */\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: rgba(0, 0, 0, 0.1); /* Black background with opacity */\n    z-index: 2; /* Specify a stack order in case you\'re using a different order for other elements */\n}\n\n#overlay-item {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    color: #fff;\n    transform: translate(-50%, -50%);\n    height: 600px;\n    width: 550px;\n    background-color: #829cbc;\n    border-radius: 20px;\n    box-shadow: 0px 4px 15px 3px rgba(0, 0, 0, 0.25);\n    padding: 30px;\n    display: flex;\n    flex-direction: column;\n    z-index: 3;\n    overflow: auto;\n    justify-content: space-around;\n    gap: 10px;\n}\n\n#cardHeader {\n    font-size: 32px;\n    font-weight: 300;\n}\n\n#cardPriorityDiv {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n#priorityContainer {\n    display: flex;\n    gap: 10px;\n}\n\n.cardPriority {\n    font-weight: 700;\n    font-size: 32px;\n    height: 50px;\n    width: 50px;\n    border-radius: 10px;\n    border: 1px solid whitesmoke;\n    text-align: center;\n    transition: transform 0.2s;\n}\n\n.cardPriority:hover {\n    transform: scale(1.05);\n    border: 2px solid whitesmoke;\n    cursor: pointer;\n}\n\n.cardPriorityOne {\n    color: #47894b;\n}\n\n.cardPriorityTwo {\n    color: #f4e98c;\n}\n\n.cardPriorityThree {\n    color: #b90f0f;\n}\n\n.cardPrioritySelected {\n    border: 2px solid whitesmoke;\n    transform: scale(1.05);\n}\n\n/* Due Date */\n\n#cardDueDiv {\n    display: flex;\n    justify-content: space-between;\n}\n\n/* Notes */\n\ntextarea {\n    width: 100%; /* Full width */\n    min-height: 75px;\n    padding: 12px; /* Some padding */\n    border: 1px solid #ccc; /* Gray border */\n    border-radius: 4px; /* Rounded borders */\n    box-sizing: border-box; /* Make sure that padding and width stays in place */\n    margin-top: 6px; /* Add a top margin */\n    margin-bottom: 16px; /* Bottom margin */\n    resize: none; /* Allow the user to vertically resize the textarea (not horizontally) */\n    font-family: "Poppins", sans-serif;\n}\n\n/* Checklist */\n\n.newItem {\n    padding: 2px;\n    background-color: transparent;\n    border: none;\n    color: white;\n}\n\n.checklistDiv {\n    border: 1px solid #ddd;\n    padding: 4px;\n    border-radius: 5px;\n}\n\n.checklistItem {\n    list-style: none;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n\n.checkboxChecklist {\n    min-width: 15px;\n    min-height: 15px;\n    background-color: white;\n    vertical-align: middle;\n    border: 1px solid #000;\n    appearance: none;\n    outline: none;\n    cursor: pointer;\n    transition: all 0.1s;\n}\n\n.checkboxChecklist:hover {\n    transform: scale(1.2);\n}\n'],sourceRoot:""}]);const s=o},584:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),a=t.n(r),i=t(645),o=t.n(i)()(a());o.push([e.id,"#sidebar {\n    height: 100%;\n    width: 20%;\n    background-color: #1f487e;\n}\n\n#headerContainer {\n    border-bottom: 1px solid white;\n    text-align: center;\n    padding: 10px;\n    height: 20%;\n}\n\n#headerContainer h2 {\n    font-weight: 500;\n    letter-spacing: 1px;\n    font-size: 32px;\n}\n\n#projects {\n    height: 80%;\n}\n\n#projectList {\n    list-style: none;\n    padding: 20px;\n}\n\n#newProject {\n    padding: 2px;\n    background-color: transparent;\n    border: none;\n    color: white;\n    width: 80%;\n}\n\n.project {\n    cursor: pointer;\n    background-color: #ebecf0;\n    color: black;\n    margin-top: 5px;\n    border-radius: 10px;\n    padding-left: 10px;\n    box-shadow: 0px 5px 10px 1px rgba(131, 45, 45, 0.15);\n    font-weight: 300;\n    transition: all 0.1s;\n}\n\n.project:hover {\n    transform: scale(1.01);\n    box-shadow: 0px 5px 10px 1px rgba(131, 45, 45, 0.3);\n}\n","",{version:3,sources:["webpack://./src/styles/sidebar.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,UAAU;IACV,yBAAyB;AAC7B;;AAEA;IACI,8BAA8B;IAC9B,kBAAkB;IAClB,aAAa;IACb,WAAW;AACf;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,gBAAgB;IAChB,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,6BAA6B;IAC7B,YAAY;IACZ,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,eAAe;IACf,yBAAyB;IACzB,YAAY;IACZ,eAAe;IACf,mBAAmB;IACnB,kBAAkB;IAClB,oDAAoD;IACpD,gBAAgB;IAChB,oBAAoB;AACxB;;AAEA;IACI,sBAAsB;IACtB,mDAAmD;AACvD",sourcesContent:["#sidebar {\n    height: 100%;\n    width: 20%;\n    background-color: #1f487e;\n}\n\n#headerContainer {\n    border-bottom: 1px solid white;\n    text-align: center;\n    padding: 10px;\n    height: 20%;\n}\n\n#headerContainer h2 {\n    font-weight: 500;\n    letter-spacing: 1px;\n    font-size: 32px;\n}\n\n#projects {\n    height: 80%;\n}\n\n#projectList {\n    list-style: none;\n    padding: 20px;\n}\n\n#newProject {\n    padding: 2px;\n    background-color: transparent;\n    border: none;\n    color: white;\n    width: 80%;\n}\n\n.project {\n    cursor: pointer;\n    background-color: #ebecf0;\n    color: black;\n    margin-top: 5px;\n    border-radius: 10px;\n    padding-left: 10px;\n    box-shadow: 0px 5px 10px 1px rgba(131, 45, 45, 0.15);\n    font-weight: 300;\n    transition: all 0.1s;\n}\n\n.project:hover {\n    transform: scale(1.01);\n    box-shadow: 0px 5px 10px 1px rgba(131, 45, 45, 0.3);\n}\n"],sourceRoot:""}]);const s=o},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(o[d]=!0)}for(var c=0;c<e.length;c++){var A=[].concat(e[c]);r&&o[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),a&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=a):A[4]="".concat(a)),n.push(A))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */"),o=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},o=[],s=0;s<e.length;s++){var d=e[s],c=r.base?d[0]+r.base:d[0],A=i[c]||0,l="".concat(c," ").concat(A);i[c]=A+1;var u=t(l),h={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)n[u].references++,n[u].updater(h);else{var p=a(h,r);r.byIndex=s,n.splice(s,0,{identifier:l,updater:p,references:1})}o.push(l)}return o}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var s=t(i[o]);n[s].references--}for(var d=r(e,a),c=0;c<i.length;c++){var A=t(i[c]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}i=d}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(795),a=t.n(r),i=t(569),o=t.n(i),s=t(565),d=t.n(s),c=t(216),A=t.n(c),l=t(589),u=t.n(l),h=t(638),p={};p.styleTagTransform=u(),p.setAttributes=d(),p.insert=o().bind(null,"head"),p.domAPI=a(),p.insertStyleElement=A(),n()(h.Z,p),h.Z&&h.Z.locals&&h.Z.locals;var m=t(584),f={};f.styleTagTransform=u(),f.setAttributes=d(),f.insert=o().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=A(),n()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;var g=t(756),C={};C.styleTagTransform=u(),C.setAttributes=d(),C.insert=o().bind(null,"head"),C.domAPI=a(),C.insertStyleElement=A(),n()(g.Z,C),g.Z&&g.Z.locals&&g.Z.locals;class b{constructor(e,n=0,t=null,r=[],a=null){this.descr=e,this.priority=n,this.due=t,this.note=a,this.checklist=r}}class y{constructor(e,n,t=[],r=0){this.name=e,this.id=n,this.todos=t,this.idCount=r}createTodo(e){return new b(e)}addTodo=e=>{const n=this.createTodo(e);return n.id=this.idCount++,this.todos.push(n),I(),n};removeTodo(e){const n=this.getIndex(e);this.todos.splice(n,1),I()}changePriority(e,n){const t=this.getIndex(e);this.todos[t].priority=n,I()}changeDue(e,n){const t=this.getIndex(e);this.todos[t].due=n,I()}changeNote(e,n){const t=this.getIndex(e);this.todos[t].note=n,I()}addChecklistItem(e,n){const t=this.getIndex(e);this.todos[t].checklist.push(n),I()}removeCheckListItem(e,n){const t=this.getIndex(e),r=this.todos[t].checklist.findIndex((e=>e===n));this.todos[t].checklist.splice(r,1),I()}getIndex(e){return this.todos.findIndex((n=>n.id==e))}}const x=[];let B=0;function w(e){const n=new y(e,B++);return x.push(n),n}function v(e){const n=x.findIndex((n=>n.id==e));return x[n]}function I(){localStorage.setItem("projects",JSON.stringify(x)),localStorage.setItem("projectIdCount",JSON.stringify(B))}function k(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function E(e){return k(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function T(e){k(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function M(e){if(k(1,arguments),!E(e)&&"number"!=typeof e)return!1;var n=T(e);return!isNaN(Number(n))}var S={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function P(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth,r=e.formats[t]||e.formats[e.defaultWidth];return r}}const D={date:P({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:P({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:P({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var L={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function U(e){return function(n,t){var r,a=t||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var i=e.defaultFormattingWidth||e.defaultWidth,o=a.width?String(a.width):i;r=e.formattingValues[o]||e.formattingValues[i]}else{var s=e.defaultWidth,d=a.width?String(a.width):e.defaultWidth;r=e.values[d]||e.values[s]}return r[e.argumentCallback?e.argumentCallback(n):n]}}const j={ordinalNumber:function(e,n){var t=Number(e),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:U({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:U({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:U({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:U({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:U({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Y(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],i=n.match(a);if(!i)return null;var o,s=i[0],d=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(d)?H(d,(function(e){return e.test(s)})):W(d,(function(e){return e.test(s)}));o=e.valueCallback?e.valueCallback(c):c,o=t.valueCallback?t.valueCallback(o):o;var A=n.slice(s.length);return{value:o,rest:A}}}function W(e,n){for(var t in e)if(e.hasOwnProperty(t)&&n(e[t]))return t}function H(e,n){for(var t=0;t<e.length;t++)if(n(e[t]))return t}var z,O={ordinalNumber:(z={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(z.matchPattern);if(!t)return null;var r=t[0],a=e.match(z.parsePattern);if(!a)return null;var i=z.valueCallback?z.valueCallback(a[0]):a[0];i=n.valueCallback?n.valueCallback(i):i;var o=e.slice(r.length);return{value:i,rest:o}}),era:Y({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Y({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:Y({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Y({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Y({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const N={code:"en-US",formatDistance:function(e,n,t){var r,a=S[e];return r="string"==typeof a?a:1===n?a.one:a.other.replace("{{count}}",n.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:D,formatRelative:function(e,n,t,r){return L[e]},localize:j,match:O,options:{weekStartsOn:0,firstWeekContainsDate:1}};function q(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function F(e,n){k(2,arguments);var t=T(e).getTime(),r=q(n);return new Date(t+r)}function Z(e,n){k(2,arguments);var t=q(n);return F(e,-t)}var R=864e5;function X(e){k(1,arguments);var n=1,t=T(e),r=t.getUTCDay(),a=(r<n?7:0)+r-n;return t.setUTCDate(t.getUTCDate()-a),t.setUTCHours(0,0,0,0),t}function Q(e){k(1,arguments);var n=T(e),t=n.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var a=X(r),i=new Date(0);i.setUTCFullYear(t,0,4),i.setUTCHours(0,0,0,0);var o=X(i);return n.getTime()>=a.getTime()?t+1:n.getTime()>=o.getTime()?t:t-1}function G(e){k(1,arguments);var n=Q(e),t=new Date(0);t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0);var r=X(t);return r}var J=6048e5;function $(e,n){k(1,arguments);var t=n||{},r=t.locale,a=r&&r.options&&r.options.weekStartsOn,i=null==a?0:q(a),o=null==t.weekStartsOn?i:q(t.weekStartsOn);if(!(o>=0&&o<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=T(e),d=s.getUTCDay(),c=(d<o?7:0)+d-o;return s.setUTCDate(s.getUTCDate()-c),s.setUTCHours(0,0,0,0),s}function V(e,n){k(1,arguments);var t=T(e),r=t.getUTCFullYear(),a=n||{},i=a.locale,o=i&&i.options&&i.options.firstWeekContainsDate,s=null==o?1:q(o),d=null==a.firstWeekContainsDate?s:q(a.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=new Date(0);c.setUTCFullYear(r+1,0,d),c.setUTCHours(0,0,0,0);var A=$(c,n),l=new Date(0);l.setUTCFullYear(r,0,d),l.setUTCHours(0,0,0,0);var u=$(l,n);return t.getTime()>=A.getTime()?r+1:t.getTime()>=u.getTime()?r:r-1}function _(e,n){k(1,arguments);var t=n||{},r=t.locale,a=r&&r.options&&r.options.firstWeekContainsDate,i=null==a?1:q(a),o=null==t.firstWeekContainsDate?i:q(t.firstWeekContainsDate),s=V(e,n),d=new Date(0);d.setUTCFullYear(s,0,o),d.setUTCHours(0,0,0,0);var c=$(d,n);return c}var K=6048e5;function ee(e,n){for(var t=e<0?"-":"",r=Math.abs(e).toString();r.length<n;)r="0"+r;return t+r}const ne=function(e,n){var t=e.getUTCFullYear(),r=t>0?t:1-t;return ee("yy"===n?r%100:r,n.length)},te=function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):ee(t+1,2)},re=function(e,n){return ee(e.getUTCDate(),n.length)},ae=function(e,n){return ee(e.getUTCHours()%12||12,n.length)},ie=function(e,n){return ee(e.getUTCHours(),n.length)},oe=function(e,n){return ee(e.getUTCMinutes(),n.length)},se=function(e,n){return ee(e.getUTCSeconds(),n.length)},de=function(e,n){var t=n.length,r=e.getUTCMilliseconds();return ee(Math.floor(r*Math.pow(10,t-3)),n.length)};var ce={G:function(e,n,t){var r=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var r=e.getUTCFullYear(),a=r>0?r:1-r;return t.ordinalNumber(a,{unit:"year"})}return ne(e,n)},Y:function(e,n,t,r){var a=V(e,r),i=a>0?a:1-a;return"YY"===n?ee(i%100,2):"Yo"===n?t.ordinalNumber(i,{unit:"year"}):ee(i,n.length)},R:function(e,n){return ee(Q(e),n.length)},u:function(e,n){return ee(e.getUTCFullYear(),n.length)},Q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(r);case"QQ":return ee(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(r);case"qq":return ee(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,n,t){var r=e.getUTCMonth();switch(n){case"M":case"MM":return te(e,n);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(e,n,t){var r=e.getUTCMonth();switch(n){case"L":return String(r+1);case"LL":return ee(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(e,n,t,r){var a=function(e,n){k(1,arguments);var t=T(e),r=$(t,n).getTime()-_(t,n).getTime();return Math.round(r/K)+1}(e,r);return"wo"===n?t.ordinalNumber(a,{unit:"week"}):ee(a,n.length)},I:function(e,n,t){var r=function(e){k(1,arguments);var n=T(e),t=X(n).getTime()-G(n).getTime();return Math.round(t/J)+1}(e);return"Io"===n?t.ordinalNumber(r,{unit:"week"}):ee(r,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):re(e,n)},D:function(e,n,t){var r=function(e){k(1,arguments);var n=T(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var r=n.getTime(),a=t-r;return Math.floor(a/R)+1}(e);return"Do"===n?t.ordinalNumber(r,{unit:"dayOfYear"}):ee(r,n.length)},E:function(e,n,t){var r=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(e,n,t,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(n){case"e":return String(i);case"ee":return ee(i,2);case"eo":return t.ordinalNumber(i,{unit:"day"});case"eee":return t.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},c:function(e,n,t,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(n){case"c":return String(i);case"cc":return ee(i,n.length);case"co":return t.ordinalNumber(i,{unit:"day"});case"ccc":return t.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(a,{width:"narrow",context:"standalone"});case"cccccc":return t.day(a,{width:"short",context:"standalone"});default:return t.day(a,{width:"wide",context:"standalone"})}},i:function(e,n,t){var r=e.getUTCDay(),a=0===r?7:r;switch(n){case"i":return String(a);case"ii":return ee(a,n.length);case"io":return t.ordinalNumber(a,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(e,n,t){var r=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,n,t){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,n,t){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var r=e.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return ae(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):ie(e,n)},K:function(e,n,t){var r=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(r,{unit:"hour"}):ee(r,n.length)},k:function(e,n,t){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===n?t.ordinalNumber(r,{unit:"hour"}):ee(r,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):oe(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):se(e,n)},S:function(e,n){return de(e,n)},X:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(n){case"X":return le(a);case"XXXX":case"XX":return ue(a);default:return ue(a,":")}},x:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();switch(n){case"x":return le(a);case"xxxx":case"xx":return ue(a);default:return ue(a,":")}},O:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+Ae(a,":");default:return"GMT"+ue(a,":")}},z:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+Ae(a,":");default:return"GMT"+ue(a,":")}},t:function(e,n,t,r){var a=r._originalDate||e;return ee(Math.floor(a.getTime()/1e3),n.length)},T:function(e,n,t,r){return ee((r._originalDate||e).getTime(),n.length)}};function Ae(e,n){var t=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),i=r%60;if(0===i)return t+String(a);var o=n||"";return t+String(a)+o+ee(i,2)}function le(e,n){return e%60==0?(e>0?"-":"+")+ee(Math.abs(e)/60,2):ue(e,n)}function ue(e,n){var t=n||"",r=e>0?"-":"+",a=Math.abs(e);return r+ee(Math.floor(a/60),2)+t+ee(a%60,2)}const he=ce;function pe(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}}function me(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}}const fe={p:me,P:function(e,n){var t,r=e.match(/(P+)(p+)?/)||[],a=r[1],i=r[2];if(!i)return pe(e,n);switch(a){case"P":t=n.dateTime({width:"short"});break;case"PP":t=n.dateTime({width:"medium"});break;case"PPP":t=n.dateTime({width:"long"});break;default:t=n.dateTime({width:"full"})}return t.replace("{{date}}",pe(a,n)).replace("{{time}}",me(i,n))}};function ge(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}var Ce=["D","DD"],be=["YY","YYYY"];function ye(e){return-1!==Ce.indexOf(e)}function xe(e){return-1!==be.indexOf(e)}function Be(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"))}var we=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ve=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Ie=/^'([^]*?)'?$/,ke=/''/g,Ee=/[a-zA-Z]/;function Te(e,n,t){k(2,arguments);var r=String(n),a=t||{},i=a.locale||N,o=i.options&&i.options.firstWeekContainsDate,s=null==o?1:q(o),d=null==a.firstWeekContainsDate?s:q(a.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=i.options&&i.options.weekStartsOn,A=null==c?0:q(c),l=null==a.weekStartsOn?A:q(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!i.localize)throw new RangeError("locale must contain localize property");if(!i.formatLong)throw new RangeError("locale must contain formatLong property");var u=T(e);if(!M(u))throw new RangeError("Invalid time value");var h=ge(u),p=Z(u,h),m={firstWeekContainsDate:d,weekStartsOn:l,locale:i,_originalDate:u},f=r.match(ve).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,fe[n])(e,i.formatLong,m):e})).join("").match(we).map((function(t){if("''"===t)return"'";var r=t[0];if("'"===r)return Me(t);var o=he[r];if(o)return!a.useAdditionalWeekYearTokens&&xe(t)&&Be(t,n,e),!a.useAdditionalDayOfYearTokens&&ye(t)&&Be(t,n,e),o(p,t,i.localize,m);if(r.match(Ee))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return t})).join("");return f}function Me(e){return e.match(Ie)[1].replace(ke,"'")}function Se(e,n,t,r,a){const i=parseInt(r);switch(e.classList.remove("cardPrioritySelected"),n.classList.remove("cardPrioritySelected"),t.classList.remove("cardPrioritySelected"),document.querySelector(`[data-priorityid = "${a}"]`).classList.remove("cardPriorityOne"),document.querySelector(`[data-priorityid = "${a}"]`).classList.remove("cardPriorityTwo"),document.querySelector(`[data-priorityid = "${a}"]`).classList.remove("cardPriorityThree"),i){case 1:e.classList.add("cardPrioritySelected"),document.querySelector(`[data-priorityid = "${a}"]`).classList.add("cardPriorityOne");break;case 2:n.classList.add("cardPrioritySelected"),document.querySelector(`[data-priorityid = "${a}"]`).classList.add("cardPriorityTwo");break;case 3:t.classList.add("cardPrioritySelected"),document.querySelector(`[data-priorityid = "${a}"]`).classList.add("cardPriorityThree")}v(Ye).changePriority(a,i)}const Pe=document.getElementById("addButton"),De=document.getElementById("task"),Le=document.getElementById("tasks"),Ue=document.getElementById("projectHeader"),je=document.querySelector("#main");let Ye=0;function We(e){v(e).todos.forEach((e=>{He(e)}))}function He(e){const n=document.createElement("div");n.classList.add("todo"),n.setAttribute("data-todoID",`${e.id}`);const t=document.createElement("div");t.classList.add("todoContainer");const r=document.createElement("input");r.setAttribute("type","checkbox"),r.classList.add("checkbox"),r.addEventListener("click",(()=>{v(Ye).removeTodo(r.parentElement.parentElement.getAttribute("data-todoID")),r.parentElement.parentElement.remove(),I()}));const a=document.createElement("p");a.setAttribute("id","todoText"),a.innerHTML=e.descr;const i=document.createElement("p");switch(i.innerHTML="!",i.classList.add("todoPriority"),i.setAttribute("data-priorityid",`${e.id}`),e.priority){case 1:i.classList.add("cardPriorityOne");break;case 2:i.classList.add("cardPriorityTwo");break;case 3:i.classList.add("cardPriorityThree")}n.addEventListener("click",(n=>{"checkbox"!==n.target.className&&(function(e){document.getElementById("overlay").style.display="block";const n=document.getElementById("overlay-item"),t=function(e){const n=document.createElement("h2");return n.setAttribute("id","cardHeader"),n.innerHTML=e,n}(e.descr),r=function(e){const n=document.createElement("div");n.setAttribute("id","cardPriorityDiv");const t=document.createElement("p");t.innerHTML="Select a priority:",t.setAttribute("id","cardPriorityText");const r=document.createElement("div");r.setAttribute("id","priorityContainer");const a=document.createElement("p");a.innerHTML="!",a.classList.add("cardPriority"),a.classList.add("cardPriorityOne"),a.setAttribute("id","cardPriorityOne"),a.setAttribute("data-priority","1");const i=document.createElement("p");i.innerHTML="!",i.classList.add("cardPriority"),i.classList.add("cardPriorityTwo"),i.setAttribute("id","cardPriorityTwo"),i.setAttribute("data-priority","2");const o=document.createElement("p");return o.innerHTML="!",o.classList.add("cardPriority"),o.classList.add("cardPriorityThree"),o.setAttribute("id","cardPriorityThree"),o.setAttribute("data-priority","3"),Se(a,i,o,e.priority,e.id),r.addEventListener("click",(n=>{void 0!==n.target.dataset.priority&&Se(a,i,o,n.target.dataset.priority,e.id)})),n.appendChild(t),r.appendChild(a),r.appendChild(i),r.appendChild(o),n.appendChild(r),n}(e),a=function(e){const n=document.createElement("div");n.setAttribute("id","cardDueDiv");const t=document.createElement("p");t.innerHTML="Select a due date:",t.setAttribute("id","cardDueText");const r=document.createElement("input");return r.setAttribute("type","date"),r.setAttribute("name","dueDate"),r.setAttribute("id","dueDate"),e.due&&r.setAttribute("value",`${Te(e.due,"yyyy-MM-dd")}`),r.addEventListener("input",(()=>{const n=new Date(r.valueAsDate);v(Ye).changeDue(e.id,Te(n,"do MMM yyyy")),document.querySelector(`[data-dateindex = "${e.id}"]`).innerHTML=e.due})),n.appendChild(t),n.appendChild(r),n}(e),i=function(e){const n=document.createElement("div");n.classList.add("checklistDiv");const t=document.createElement("p");t.classList.add("checklistHeader"),t.innerHTML="Checklist";const r=document.createElement("ul");r.classList.add("list");const a=document.createElement("input");return a.classList.add("newItem"),a.setAttribute("placeholder","+"),a.setAttribute("type","text"),e.checklist.forEach((n=>{const t=document.createElement("li");t.classList.add("checklistItem");const a=document.createElement("input");a.setAttribute("type","checkbox"),a.classList.add("checkboxChecklist"),a.addEventListener("click",(()=>{a.parentElement.remove(),v(Ye).removeCheckListItem(e.id,a.nextElementSibling.innerHTML)}));const i=document.createElement("p");i.classList.add("checkboxLabel"),i.innerHTML=n,t.appendChild(a),t.appendChild(i),r.appendChild(t)})),a.addEventListener("keyup",(n=>{if("Enter"===n.key){v(Ye).addChecklistItem(e.id,a.value);const n=document.createElement("li");n.classList.add("checklistItem");const t=document.createElement("input");t.setAttribute("type","checkbox"),t.classList.add("checkboxChecklist"),t.addEventListener("click",(()=>{t.parentElement.remove(),v(Ye).removeCheckListItem(e.id,t.nextElementSibling.innerHTML)}));const i=document.createElement("p");i.classList.add("checkboxLabel"),i.innerHTML=a.value,n.appendChild(t),n.appendChild(i),r.insertBefore(n,a),a.value=""}})),n.appendChild(t),r.appendChild(a),n.appendChild(r),n}(e),o=function(e){const n=document.createElement("div"),t=document.createElement("label"),r=document.createElement("textarea");return t.setAttribute("for","notes"),t.innerHTML="Notes",r.setAttribute("id","notes"),r.setAttribute("placeholder","Add notes.."),n.classList.add("notesDiv"),n.appendChild(t),n.appendChild(r),e.note&&(r.innerHTML=e.note),r.addEventListener("input",(()=>{v(Ye).changeNote(e.id,r.value)})),n}(e);n.appendChild(t),n.appendChild(r),n.appendChild(a),n.appendChild(i),n.appendChild(o)}(e),function(){const e=document.getElementById("overlay");e.addEventListener("click",(n=>{"overlay"===n.target.id&&(e.style.display="none",document.getElementById("overlay-item").innerHTML="")}))}())}));const o=document.createElement("div");o.classList.add("datecontainer");const s=document.createElement("p");s.classList.add("datep"),s.setAttribute("data-dateindex",`${e.id}`),e.due&&(s.innerHTML=e.due),o.appendChild(s),t.appendChild(r),t.appendChild(a),n.appendChild(t),n.appendChild(o),n.appendChild(i),Le.appendChild(n),I()}function ze(e){const n=document.createElement("h1");n.innerHTML=v(e).name,Ue.innerHTML="",Ue.appendChild(n),Ye=e,Le.innerHTML="",We(e),Oe(e),localStorage.setItem("currentProjectID",JSON.stringify(Ye))}function Oe(e){document.querySelector(".removeButton")&&document.querySelector(".removeButton").remove();const n=document.createElement("input");n.setAttribute("type","button"),n.classList.add("removeButton"),n.setAttribute("value","Delete Project"),n.setAttribute("data-btnid",`${e}`),n.addEventListener("click",(()=>{1===x.length?alert("You need to have at least one project!"):confirm("Are you sure you want to delete this project?")&&(function(e){const n=x.findIndex((n=>n.id==e));x.splice(n,1)}(e),document.querySelector(`[data-projectid="${e}"]`).remove(),ze(x[0].id),I())})),je.appendChild(n)}const Ne=document.getElementById("finalLI"),qe=document.getElementById("newProject"),Fe=document.getElementById("projectList"),Ze=document.getElementById("projectHeader");function Re(e,n){const t=document.createElement("li"),r=document.createElement("h4");r.classList.add("project"),r.setAttribute("data-projectid",`${n}`),r.innerHTML=e,r.addEventListener("click",(()=>{ze(n)})),t.appendChild(r),Fe.insertBefore(t,Ne),I()}Pe.addEventListener("click",(()=>{He(v(Ye).addTodo(De.value)),De.value=""})),De.addEventListener("keyup",(e=>{"Enter"===e.key&&(He(v(Ye).addTodo(De.value)),De.value="")})),qe.addEventListener("keyup",(e=>{if("Enter"===e.key){const e=w(qe.value);Re(e.name,e.id),qe.value=""}})),localStorage.getItem("projects")?(B=JSON.parse(localStorage.getItem("projectIdCount")),JSON.parse(localStorage.getItem("projects")).forEach((e=>{x.push(new y(e.name,e.id,e.todos,e.idCount))})),Ye=JSON.parse(localStorage.getItem("currentProjectID"))):w("Quick Project"),x.forEach((e=>{Re(e.name,e.id)})),function(){const e=document.createElement("h1");e.innerHTML=x[0].name,Ze.innerHTML="",Ze.appendChild(e)}(),We(x[0].id),Oe(x[0].id)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,